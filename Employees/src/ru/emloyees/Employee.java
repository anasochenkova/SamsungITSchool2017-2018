package ru.emloyees;

/**
 * Реализовать класс, представляющий собой описание сотрудника компании (EmployeeClass).
 *
 * Экземпляр класса, реализующего данный интерфейс, должен соответствовать одному сотруднику.
 * Необходимо реализовать :
 * -методы get/set для имени, фамилии,  возраста, должности
 * -методы get и increaseSalary зарплаты сотрудника, 
 * -метод set и getManagerName для менеджера;
 * -метод get полного имени сотрудника;
 * -метод для получения топ-менеджера ( если нарисовать дерево подчинения, то, топ-менеджер будет корнем,
 * а самые низкие сотрудники - листьями), метод увеличения зарплаты;
 * 
 * Данные (поля) должны быть объявлены как private-переменные класса. 
 * Методы get** / set** должны оперировать с этими полями.
 * Среди конструкторов должен быть конструктор без параметров (empty), причем public, 
 * остальные - на ваш вкус.
 * Класс должен работать корректно после вызова такого конструктора и без вызова set-метода(-ов).
 * По умолчанию зарплата должна быть равна 300.

 * public class public class EmployeeClass implements Employee {  }
 */
public interface Employee {

    /**
     * @return Должность сотрудника на настоящий момент.
     */
	public String getPosition();
	
	/**
	 * Устанавливает должность сотрудника
	 * @param position - новая должность
	 */
	public void setPosition(String position);
	
    /**
     * @return Зарплата сотрудника на настоящий момент.
     */
    int getSalary();

    /**
     * Увеличивает зарплату сотрудника на заданное значение
     * @param value Значение, на которое нужно увеличить
     */
    public void increaseSalary(int value);

    /**
     * @return Имя сотрудника
     */
    public String getFirstName();

    /**
     * Устанавливает имя сотрудника
     * @param firstName Новое имя
     */
    public void setFirstName(String firstName);

    /**
     * @return Фамилия сотрудника
     */
    public String getLastName();

    /**
     * Устанавливает фамилию сотрудника
     * @param lastName Новая фамилия
     */
    public void setLastName(String lastName);

    /**
     * @return Имя и фамилия сотрудника, разделенные символом " " (пробел)
     */
    public String getFullName();

    /**
     * @return Возраст сотрудника на настоящий момент.
     */
	public String getAge();
	
	/**
	 * Устанавливает возраст сотрудника
	 * @param age - устанавливаемый возраст
	 */
	public void setAge(String age);

    /**
     * Устанавливает Менеджера сотрудника.
     * @param manager Сотрудник, являющийся менеджером данного сотрудника.
     * НЕ следует предполагать, что менеджер является экземпляром класса EmployeeClass.
     */
    public void setManager(Employee manager);

    /**
     * @return Имя и фамилия Менеджера, разделенные пробелом.
     * Если Менеджер не задан (null), возвращает строку "Менеджера нет".
     */
    public String getManagerName();

    /**
     * Возвращает Менеджера верхнего уровня, если над данным сотрудником нет ни одного менеджера, возвращает данного сотрудника.
     * Замечание: поскольку менеджер, установленный методом setManager(Employee),
     *   может быть экзепляром другого класса (тк изначально обращались по имени интерфейса, а не класса), 
     *   при поиске топ-менеджера нельзя обращаться
     *   к полю класса EmployeeClass. Более того, поскольку в интерфейсе Employee не объявлено
     *   метода getManager(), поиск топ-менеджера невозможно организовать в виде цикла.
     *   Вместо этого нужно использовать рекурсию (и это "более объектно-ориентированно").
     */
    public Employee getTopManager();
}